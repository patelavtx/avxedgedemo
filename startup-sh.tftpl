#!/bin/bash
# Configure host VM for edge instance(s)

# Enable IP Forwarding
sysctl net.ipv4.ip_forward=1

# Make /edge dir
if [ ! -d /edge ]; then
  mkdir /edge
fi

# Download Edge.qcow2
# We only get the qcow2 and ztp if the qcow2 is missing.
if [ ! -f /var/lib/libvirt/images/edge.qcow2 ]; then
  mkdir -p var/lib/libvirt/images
  while :; do
    #Edge Qcow2?
    gsutil cp gs://${edge_bucket}/edge.qcow2 /var/lib/libvirt/images/.
    if [ $? -ne 0 ]; then
      echo "Warning: edge.qcow2 not in bucket."
      sleep 60 #Sleep 1 min
      continue
    else
      echo "edge.qcow2 downloaded."
      break
    fi
  done
fi

if [ ! -f /var/lib/libvirt/images/ztp.iso ]; then
  #ZTP iso
  while :; do
    gsutil cp gs://${bucket}/${host_vm}/ztp.iso /var/lib/libvirt/images/.
    if [ $? -ne 0 ]; then
      echo "Warning: ztp.iso not in bucket."
      sleep 15 #Sleep 1 min
      continue
    else
      echo "ztp.iso downloaded."
      break
    fi
  done
fi

# Add vxlan files to directory.
# Since the script is kicked off after the br-lan network is started, it needs to be there first.
if [ ! -f /etc/libvirt/hooks/network ]; then
  mkdir -p /etc/libvirt/hooks
  while :; do
    gsutil cp gs://${bucket}/${host_vm}/libvirt-hook-network.sh /etc/libvirt/hooks/network
    if [ $? -ne 0 ]; then
      echo "$(date): Error downloading libvirt hook for vxlan."
      sleep 15
      continue
    else
      echo "Libvirt hook script downloaded."
      break
    fi
  done
  chmod o+rx /etc/libvirt/hooks/network
fi

#Wait for cloud-init
#It might be done while we copied the files.
cloud-init status --wait > /dev/null 2>&1
if [ $? -eq 1 ]; then
  echo "cloud-init status returned 1."
fi

# Configure FRR
frr_restart_needed=0
if [ -z "$(command -v vtysh)" ]; then
  echo "vtysh command not found."
  exit 1
else
  #Download FRR Config
  grep -q "router bgp ${host_asn}" /etc/frr/frr.conf
  if [ $? -ne 0 ]; then
    mkdir -p /etc/frr
    while :; do
      gsutil cp gs://${bucket}/${host_vm}/frr.conf /etc/frr/frr.conf
      if [ $? -ne 0 ]; then
        echo "Error downloading frr.conf."
        sleep 15
        continue
      else
        echo "frr.conf downloaded."
        frr_restart_needed=1
        break
      fi
    done
  fi
  # Make sure BGP daemon is enabled.
  grep -q "bgpd=yes" /etc/frr/daemons
  case $? in
    2)
      echo "/etc/frr/daemons is missing."
      exit 1
      ;;
    1)
      echo "frr daemons updated."
      sed -i 's/bgpd=no/bgpd=yes/g' /etc/frr/daemons
      frr_restart_needed=1
      ;;
    0)
      ;;
  esac
  # Restart frr
  if [ $frr_restart_needed -eq 1 ]; then
    systemctl restart frr
  fi
fi

# Needed for Libvirt hook
if [ -z "$(command -v bridge)" ]; then
  echo "bridge command not found."
  exit 1
fi

# Enable Guest shutdown for Libvirt
if [ -z $(grep -E "^ON_SHUTDOWN=shutdown" /etc/default/libvirt-guests) ]; then
  sed -i "s/^#\?ON_SHUTDOWN.*$/ON_SHUTDOWN=shutdown/g" /etc/default/libvirt-guests
  if [ -z $(grep -E "^ON_SHUTDOWN=shutdown" /etc/default/libvirt-guests) ]; then
    echo "ON_SHUTDOWN=shutdown" >> /etc/default/libvirt-guests
  fi
fi

# Register and start libvirt networks
netlist=$(virsh net-list --all)
for netname in "default" "br-wan" "br-lan" "br-mgmt"; do
  net=($(echo $netlist | sed -rn "s/.*($netname) ([[:lower:]]*) (yes|no) (yes|no).*/\1\n\2\n\3\n\4/p"))
  #default
  if [ $netname = "default" ]; then
    if [ "$${net[0]}" = "default" ]; then
      if [ $${net[1]} = "active" ]; then virsh net-destroy default; fi
      if [ $${net[3]} = "yes" ]; then virsh net-undefine default; fi
    fi
    continue
  fi
  #network not defined
  if [ -z $${net[0]} ]; then
    while :; do
      gsutil cp gs://${bucket}/${host_vm}/$netname.xml /edge/.
      if [ $? -ne 0 ]; then
        echo "Error downloading $netname.xml."
        sleep 15
        continue
      else
        echo "$netname.xml downloaded."
        break
      fi
    done
    virsh net-define /edge/$netname.xml
    virsh net-start $netname
    virsh net-autostart $netname
    continue
  fi
  #network defined. Is it running? 
  if [ $${net[1]} != "active" ]; then
    virsh net-start $netname
    if [ $${net[2]} != "yes" ]; then virsh net-autostart $netname; fi
    continue
  fi
done

# Register Edge VM and start it
vmstatus=$(virsh list --all | sed -rn "s/.*${edge_vm} ([[:lower:]]*)/\1/p")
if [ -z "$vmstatus" ]; then
  while :; do
    gsutil cp gs://${bucket}/${host_vm}/vm.xml /edge/.
    if [ $? -ne 0 ]; then
      echo "Error downloading vm.xml."
      sleep 15
      continue
    else
      echo "$vm.xml downloaded."
      break
    fi
  done
  virsh define /edge/vm.xml
  virsh start ${edge_vm}
  virsh autostart ${edge_vm}
fi

if [ "$vmstatus" != "running" ]; then
  virsh start ${edge_vm}
  virsh autostart ${edge_vm}
fi